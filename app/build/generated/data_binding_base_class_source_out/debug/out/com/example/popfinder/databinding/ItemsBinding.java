// Generated by view binder compiler. Do not edit!
package com.example.popfinder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.popfinder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CardView imageview;

  @NonNull
  public final ImageView imageview1;

  @NonNull
  public final TextView lat1;

  @NonNull
  public final TextView long1;

  @NonNull
  public final TextView textview;

  @NonNull
  public final TextView textview1;

  private ItemsBinding(@NonNull RelativeLayout rootView, @NonNull CardView imageview,
      @NonNull ImageView imageview1, @NonNull TextView lat1, @NonNull TextView long1,
      @NonNull TextView textview, @NonNull TextView textview1) {
    this.rootView = rootView;
    this.imageview = imageview;
    this.imageview1 = imageview1;
    this.lat1 = lat1;
    this.long1 = long1;
    this.textview = textview;
    this.textview1 = textview1;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemsBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.items, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imageview;
      CardView imageview = ViewBindings.findChildViewById(rootView, id);
      if (imageview == null) {
        break missingId;
      }

      id = R.id.imageview1;
      ImageView imageview1 = ViewBindings.findChildViewById(rootView, id);
      if (imageview1 == null) {
        break missingId;
      }

      id = R.id.lat1;
      TextView lat1 = ViewBindings.findChildViewById(rootView, id);
      if (lat1 == null) {
        break missingId;
      }

      id = R.id.long1;
      TextView long1 = ViewBindings.findChildViewById(rootView, id);
      if (long1 == null) {
        break missingId;
      }

      id = R.id.textview;
      TextView textview = ViewBindings.findChildViewById(rootView, id);
      if (textview == null) {
        break missingId;
      }

      id = R.id.textview1;
      TextView textview1 = ViewBindings.findChildViewById(rootView, id);
      if (textview1 == null) {
        break missingId;
      }

      return new ItemsBinding((RelativeLayout) rootView, imageview, imageview1, lat1, long1,
          textview, textview1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
